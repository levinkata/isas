// <auto-generated />
using System;
using Isas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Isas.Migrations
{
    [DbContext(typeof(InsurerDbContext))]
    [Migration("20190506133224_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Isas.Data.ClaimAccounting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AffectedID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClaimClassID");

                    b.Property<int>("ClaimNumber");

                    b.Property<Guid>("ClientID");

                    b.Property<Guid>("InsurerID");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("PayeeID");

                    b.Property<Guid>("PolicyID");

                    b.HasKey("ID");

                    b.ToTable("ClaimAccounting");
                });

            modelBuilder.Entity("Isas.Models.AccountChart", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountCode")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<int>("IncomeOrExpense")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("AccountChart");
                });

            modelBuilder.Entity("Isas.Models.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<Guid>("CountryID");

                    b.Property<string>("PhysicalAddress")
                        .HasMaxLength(100);

                    b.Property<string>("PostalAddress")
                        .HasMaxLength(50);

                    b.Property<Guid>("ProvinceID");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Isas.Models.AddressAssignment", b =>
                {
                    b.Property<Guid>("ItemID");

                    b.Property<Guid>("AddressID");

                    b.HasKey("ItemID", "AddressID")
                        .HasName("PK_AddressAssignment");

                    b.HasIndex("AddressID");

                    b.ToTable("AddressAssignment");
                });

            modelBuilder.Entity("Isas.Models.Affected", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Affected");
                });

            modelBuilder.Entity("Isas.Models.AllRisk", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comment")
                        .HasMaxLength(50);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ComponentID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("PolicyID");

                    b.ToTable("AllRisk");
                });

            modelBuilder.Entity("Isas.Models.AllRiskHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comment")
                        .HasMaxLength(50);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ComponentID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ComponentID");

                    b.ToTable("AllRiskHistory");
                });

            modelBuilder.Entity("Isas.Models.Attorney", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Payable");

                    b.Property<int>("PayeeClassID");

                    b.HasKey("ID");

                    b.ToTable("Attorney");
                });

            modelBuilder.Entity("Isas.Models.Authoriser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Authoriser");
                });

            modelBuilder.Entity("Isas.Models.Bank", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Payable");

                    b.Property<int>("PayeeClassID");

                    b.HasKey("ID");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Isas.Models.BankAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("BankBranchID");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("Isas.Models.BankBranch", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BIC")
                        .HasMaxLength(50);

                    b.Property<Guid>("BankID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.ToTable("BankBranch");
                });

            modelBuilder.Entity("Isas.Models.BankDirectDebit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("BIC");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid>("PolicyID");

                    b.Property<Guid>("ProductID");

                    b.HasKey("ID");

                    b.ToTable("BankDirectDebit");
                });

            modelBuilder.Entity("Isas.Models.BatchNumberGenerator", b =>
                {
                    b.Property<int>("BatchNumber");

                    b.HasKey("BatchNumber")
                        .HasName("PK_BatchNumberGenerator");

                    b.ToTable("BatchNumberGenerator");
                });

            modelBuilder.Entity("Isas.Models.BulkHandleGenerator", b =>
                {
                    b.Property<int>("BulkNumber");

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTime>("BulkDate");

                    b.Property<DateTime>("DateAdded");

                    b.Property<int>("RecordCount");

                    b.Property<string>("TableName")
                        .HasMaxLength(50);

                    b.HasKey("BulkNumber")
                        .HasName("PK_BulkHandleGenerator");

                    b.ToTable("BulkHandleGenerator");
                });

            modelBuilder.Entity("Isas.Models.Cheque", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("Date");

                    b.Property<Guid?>("ChequeExportID");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<Guid>("ProductID");

                    b.Property<string>("Remarks")
                        .HasMaxLength(50);

                    b.Property<bool>("Void");

                    b.Property<string>("VoidReason")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("ChequeNumber")
                        .IsUnique()
                        .HasName("IX_ChequeNumber")
                        .HasFilter("[ChequeNumber] IS NOT NULL");

                    b.ToTable("Cheque");
                });

            modelBuilder.Entity("Isas.Models.ChequeBook", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<int>("ChequeDateCol");

                    b.Property<int>("ChequeDateRow");

                    b.Property<int>("ChequeDigitsCol");

                    b.Property<int>("ChequeDigitsRow");

                    b.Property<int>("ChequePayeeCol");

                    b.Property<int>("ChequePayeePad");

                    b.Property<int>("ChequePayeeRow");

                    b.Property<int>("ChequeWordsCol");

                    b.Property<int>("ChequeWordsRow");

                    b.Property<string>("Company")
                        .HasMaxLength(50);

                    b.Property<int>("CompanyCol");

                    b.Property<int>("CompanyRow");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("DefaultPrinter")
                        .HasMaxLength(50);

                    b.Property<int>("FirstChequeNumber");

                    b.Property<string>("FontName")
                        .HasMaxLength(50);

                    b.Property<int>("FontSize");

                    b.Property<DateTime>("LastChequeDate");

                    b.Property<int>("LastChequeNumber");

                    b.Property<int>("LetterDateCol");

                    b.Property<int>("LetterDateRow");

                    b.Property<int>("LineSpacing");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<string>("Orientation")
                        .HasMaxLength(50);

                    b.Property<int>("PaperSize");

                    b.Property<int>("PayeeAddressCol");

                    b.Property<int>("PayeeAddressRow");

                    b.Property<int>("PayeeCityCol");

                    b.Property<int>("PayeeCityRow");

                    b.Property<int>("PayeeCol");

                    b.Property<short>("PayeeRow");

                    b.Property<Guid>("ProductID");

                    b.Property<int>("SalutationRowCol");

                    b.Property<int>("SalutationRowRow");

                    b.Property<string>("Signatory")
                        .HasMaxLength(50);

                    b.Property<int>("SignatoryCol");

                    b.Property<int>("SignatoryRow");

                    b.Property<int>("TextAmountCol");

                    b.Property<int>("TextAmountRow");

                    b.Property<int>("TextChequeCol");

                    b.Property<int>("TextChequeRow");

                    b.Property<string>("TextLine")
                        .HasMaxLength(100);

                    b.Property<int>("TextLineCol");

                    b.Property<int>("TextLineRow");

                    b.Property<int>("TransHeaderCol");

                    b.Property<int>("TransHeaderRow");

                    b.Property<int>("UserPaperHeight");

                    b.Property<int>("UserPaperWidth");

                    b.HasKey("ID");

                    b.ToTable("ChequeBook");
                });

            modelBuilder.Entity("Isas.Models.ChequeSummaryTemp", b =>
                {
                    b.Property<Guid>("PayeeID");

                    b.Property<Guid>("ProductID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Payee")
                        .HasMaxLength(50);

                    b.Property<int>("PayeeCount");

                    b.Property<string>("PostalAddress")
                        .HasMaxLength(50);

                    b.HasKey("PayeeID", "ProductID")
                        .HasName("PK_ChequeSummaryTemp");

                    b.ToTable("ChequeSummaryTemp");
                });

            modelBuilder.Entity("Isas.Models.ChequeTemp", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountCode")
                        .HasMaxLength(50);

                    b.Property<string>("Affected")
                        .HasMaxLength(50);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Authorised");

                    b.Property<int>("ClaimNumber");

                    b.Property<string>("Client")
                        .HasMaxLength(50);

                    b.Property<string>("Insurer")
                        .HasMaxLength(50);

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Payee")
                        .HasMaxLength(50);

                    b.Property<Guid>("PayeeID");

                    b.Property<string>("Product")
                        .HasMaxLength(50);

                    b.Property<Guid>("ProductID");

                    b.HasKey("ID");

                    b.ToTable("ChequeTemp");
                });

            modelBuilder.Entity("Isas.Models.Claim", b =>
                {
                    b.Property<int>("ClaimNumber");

                    b.Property<Guid?>("AddedBy");

                    b.Property<Guid?>("AffectedID");

                    b.Property<Guid>("ClaimClassID");

                    b.Property<decimal>("ClaimExcess")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClaimStatusID");

                    b.Property<string>("Comment")
                        .HasMaxLength(100);

                    b.Property<Guid>("CountryID");

                    b.Property<DateTime?>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasComputedColumnSql("GetDate()");

                    b.Property<DateTime?>("DateModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("GetDate()");

                    b.Property<DateTime>("IncidentDate");

                    b.Property<string>("IncidentDetail")
                        .HasMaxLength(100);

                    b.Property<Guid>("IncidentID");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<Guid>("PolicyID");

                    b.Property<bool>("RecoverFromThirdParty");

                    b.Property<Guid>("RegionID");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime>("ReportDate");

                    b.Property<decimal>("ReserveInsured")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReserveInsuredRevised")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReserveThirdParty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReserveThirdPartyRevised")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RiskID");

                    b.Property<Guid>("RiskItemID");

                    b.HasKey("ClaimNumber")
                        .HasName("PK_Claim");

                    b.HasIndex("AffectedID");

                    b.HasIndex("ClaimClassID");

                    b.HasIndex("ClaimStatusID");

                    b.HasIndex("CountryID");

                    b.HasIndex("IncidentID");

                    b.HasIndex("PolicyID");

                    b.HasIndex("RegionID");

                    b.HasIndex("RiskID");

                    b.ToTable("Claim");
                });

            modelBuilder.Entity("Isas.Models.ClaimAttorney", b =>
                {
                    b.Property<Guid>("ClaimNumber");

                    b.Property<Guid>("AttorneyID");

                    b.Property<int?>("ClaimNumber1");

                    b.HasKey("ClaimNumber", "AttorneyID")
                        .HasName("PK_ClaimAttorney");

                    b.HasIndex("AttorneyID");

                    b.HasIndex("ClaimNumber1");

                    b.ToTable("ClaimAttorney");
                });

            modelBuilder.Entity("Isas.Models.ClaimClass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AffectCFG");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("ClaimClass");
                });

            modelBuilder.Entity("Isas.Models.ClaimDiary", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Activity")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ActivityDate");

                    b.Property<int>("ClaimNumber");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("ClaimNumber");

                    b.ToTable("ClaimDiary");
                });

            modelBuilder.Entity("Isas.Models.ClaimDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Mandatory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("ClaimDocument");
                });

            modelBuilder.Entity("Isas.Models.ClaimDocumentSubmit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<Guid>("ClaimDocumentID");

                    b.Property<int>("ClaimNumber");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<DateTime?>("SubmitDate");

                    b.HasKey("ID");

                    b.HasIndex("ClaimDocumentID");

                    b.HasIndex("ClaimNumber");

                    b.ToTable("ClaimDocumentSubmit");
                });

            modelBuilder.Entity("Isas.Models.ClaimDriver", b =>
                {
                    b.Property<Guid>("ClaimNumber");

                    b.Property<Guid>("DriverID");

                    b.Property<int?>("ClaimNumber1");

                    b.HasKey("ClaimNumber", "DriverID")
                        .HasName("PK_ClaimDriver");

                    b.HasIndex("ClaimNumber1");

                    b.HasIndex("DriverID");

                    b.ToTable("ClaimDriver");
                });

            modelBuilder.Entity("Isas.Models.ClaimLossAdjuster", b =>
                {
                    b.Property<Guid>("ClaimNumber");

                    b.Property<Guid>("LossAdjusterID");

                    b.Property<bool>("AgreeCost");

                    b.Property<bool>("AgreeRepair");

                    b.Property<decimal>("ClaimExcess")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasMaxLength(50);

                    b.HasKey("ClaimNumber", "LossAdjusterID")
                        .HasName("PK_ClaimLossAdjuster");

                    b.HasIndex("LossAdjusterID");

                    b.ToTable("ClaimLossAdjuster");
                });

            modelBuilder.Entity("Isas.Models.ClaimNumberGenerator", b =>
                {
                    b.Property<int>("ClaimPrefix");

                    b.Property<int>("ClaimNumber");

                    b.HasKey("ClaimPrefix", "ClaimNumber")
                        .HasName("PK_ClaimNumberGenerator");

                    b.ToTable("ClaimNumberGenerator");
                });

            modelBuilder.Entity("Isas.Models.ClaimRecovery", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClaimNumber");

                    b.Property<Guid?>("PaymentReceivedID");

                    b.Property<DateTime>("RecoveryDate");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ThirdPartyID");

                    b.HasKey("ID");

                    b.HasIndex("ClaimNumber");

                    b.HasIndex("ThirdPartyID");

                    b.ToTable("ClaimRecovery");
                });

            modelBuilder.Entity("Isas.Models.ClaimRepairer", b =>
                {
                    b.Property<Guid>("ClaimNumber");

                    b.Property<Guid>("RepairerID");

                    b.Property<int?>("ClaimNumber1");

                    b.HasKey("ClaimNumber", "RepairerID")
                        .HasName("PK_ClaimRepairer");

                    b.HasIndex("ClaimNumber1");

                    b.HasIndex("RepairerID");

                    b.ToTable("ClaimRepairer");
                });

            modelBuilder.Entity("Isas.Models.ClaimStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Updatable");

                    b.HasKey("ID");

                    b.ToTable("ClaimStatus");
                });

            modelBuilder.Entity("Isas.Models.ClaimThirdParty", b =>
                {
                    b.Property<int>("ClaimNumber");

                    b.Property<Guid>("ThirdPartyID");

                    b.HasKey("ClaimNumber", "ThirdPartyID")
                        .HasName("PK_ClaimThirdParty");

                    b.HasIndex("ThirdPartyID");

                    b.ToTable("ClaimThirdParty");
                });

            modelBuilder.Entity("Isas.Models.ClaimTracingAgent", b =>
                {
                    b.Property<Guid>("ClaimNumber");

                    b.Property<Guid>("TracingAgentID");

                    b.Property<int?>("ClaimNumber1");

                    b.HasKey("ClaimNumber", "TracingAgentID")
                        .HasName("PK_ClaimTracingAgent");

                    b.HasIndex("ClaimNumber1");

                    b.HasIndex("TracingAgentID");

                    b.ToTable("ClaimTracingAgent");
                });

            modelBuilder.Entity("Isas.Models.ClaimTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountID");

                    b.Property<Guid>("AffectedID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Authorised");

                    b.Property<Guid?>("AuthoriserID");

                    b.Property<int>("ClaimNumber");

                    b.Property<bool>("Finalise");

                    b.Property<int>("HoldForPayment");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50);

                    b.Property<int>("PassForPayment");

                    b.Property<Guid?>("PayableID");

                    b.Property<Guid>("PayeeID");

                    b.Property<DateTime>("RequisitionDate");

                    b.Property<decimal>("ReserveInsured")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReserveThirdParty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Taxable");

                    b.Property<int>("TransactionNumber");

                    b.Property<Guid>("TransactionTypeID");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("AffectedID");

                    b.HasIndex("ClaimNumber");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasName("IX_InvoiceNumber")
                        .HasFilter("[InvoiceNumber] IS NOT NULL");

                    b.HasIndex("PayableID");

                    b.HasIndex("PayeeID");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasName("IX_TransactionNumber");

                    b.HasIndex("TransactionTypeID");

                    b.ToTable("ClaimTransaction");
                });

            modelBuilder.Entity("Isas.Models.ClaimTransactionGenerator", b =>
                {
                    b.Property<int>("TransactionNumber");

                    b.HasKey("TransactionNumber")
                        .HasName("PK_TransactionNumber");

                    b.ToTable("ClaimTransactionGenerator");
                });

            modelBuilder.Entity("Isas.Models.Client", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("Date");

                    b.Property<int>("BulkHandle");

                    b.Property<Guid>("ClientTypeID");

                    b.Property<Guid>("CountryID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int>("Gender");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<Guid>("OccupationID");

                    b.Property<bool>("Payable");

                    b.Property<int>("PayeeClassID");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("TitleID");

                    b.HasKey("ID");

                    b.HasIndex("ClientTypeID");

                    b.HasIndex("CountryID");

                    b.HasIndex("IDNumber")
                        .IsUnique()
                        .HasName("IX_IDNumber");

                    b.HasIndex("OccupationID");

                    b.HasIndex("TitleID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Isas.Models.ClientAccounting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountStatus");

                    b.Property<Guid>("Adjustment");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClientID");

                    b.Property<Guid>("InsurerID");

                    b.Property<Guid>("PolicyID");

                    b.Property<Guid>("PremiumID");

                    b.Property<Guid>("Refund");

                    b.Property<DateTime>("TransactionDate");

                    b.HasKey("ID");

                    b.ToTable("ClientAccounting");
                });

            modelBuilder.Entity("Isas.Models.ClientTemp", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<int>("ClientClassID");

                    b.Property<Guid>("CountryID");

                    b.Property<string>("FirstName");

                    b.Property<int?>("Gender");

                    b.Property<string>("IDNumber");

                    b.Property<string>("LastName");

                    b.Property<Guid>("OccupationID");

                    b.Property<Guid>("ProductID");

                    b.Property<Guid>("TitleID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("OccupationID");

                    b.HasIndex("TitleID");

                    b.ToTable("ClientTemp");
                });

            modelBuilder.Entity("Isas.Models.ClientType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsFirm");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("ClientType");
                });

            modelBuilder.Entity("Isas.Models.Commercial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ComponentID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<bool>("Motor");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("PolicyID");

                    b.ToTable("Commercial");
                });

            modelBuilder.Entity("Isas.Models.CommercialHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ComponentID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<bool>("Motor");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("CommercialHistory");
                });

            modelBuilder.Entity("Isas.Models.Complaint", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ComplaintDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("Complaint");
                });

            modelBuilder.Entity("Isas.Models.ComplaintDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ComplaintDetailDate");

                    b.Property<Guid>("ComplaintID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("ComplaintID");

                    b.ToTable("ComplaintDetail");
                });

            modelBuilder.Entity("Isas.Models.Component", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("Isas.Models.Container", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<string>("Business")
                        .HasMaxLength(50);

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50);

                    b.Property<Guid?>("CountryID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Container");
                });

            modelBuilder.Entity("Isas.Models.Content", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ResidenceTypeID");

                    b.Property<Guid>("RoofTypeID");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WallTypeID");

                    b.HasKey("ID");

                    b.HasIndex("PolicyID");

                    b.HasIndex("ResidenceTypeID");

                    b.HasIndex("RoofTypeID");

                    b.HasIndex("WallTypeID");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("Isas.Models.ContentHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ResidenceTypeID");

                    b.Property<Guid>("RoofTypeID");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WallTypeID");

                    b.HasKey("ID");

                    b.ToTable("ContentHistory");
                });

            modelBuilder.Entity("Isas.Models.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DialingCode");

                    b.Property<string>("ISOCode")
                        .HasMaxLength(3);

                    b.Property<string>("ISOCurrency")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Isas.Models.Coverage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Coverage");
                });

            modelBuilder.Entity("Isas.Models.Driver", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int>("Gender");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("LicenseExpiryDate");

                    b.Property<DateTime>("LicenseIssueDate");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("TitleID");

                    b.HasKey("ID");

                    b.HasIndex("TitleID");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("Isas.Models.DriverType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("DriverType");
                });

            modelBuilder.Entity("Isas.Models.FormatType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ColumnLength");

                    b.Property<string>("FieldLabel")
                        .HasMaxLength(50);

                    b.Property<string>("FieldName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsKey");

                    b.Property<Guid>("LoadFormatID");

                    b.Property<string>("Position")
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("LoadFormatID");

                    b.ToTable("FormatType");
                });

            modelBuilder.Entity("Isas.Models.Incident", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("Isas.Models.IncidentContact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthoriserID");

                    b.Property<int>("ClaimNumber");

                    b.Property<DateTime>("IssueDate");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("ClaimNumber");

                    b.ToTable("IncidentContact");
                });

            modelBuilder.Entity("Isas.Models.IncomeClass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("IncomeClass");
                });

            modelBuilder.Entity("Isas.Models.Insurer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Payable");

                    b.Property<int>("PayeeClassID");

                    b.HasKey("ID");

                    b.ToTable("Insurer");
                });

            modelBuilder.Entity("Isas.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceNumber");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<Guid>("PolicyID");

                    b.Property<int>("Status");

                    b.HasKey("InvoiceNumber")
                        .HasName("PK_Invoice");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Isas.Models.InvoiceItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InvoiceID");

                    b.Property<decimal>("Premium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("RiskID");

                    b.Property<Guid>("RiskItemID");

                    b.Property<decimal>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("ID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("Isas.Models.InvoiceNumberGenerator", b =>
                {
                    b.Property<int>("InvoiceNumber");

                    b.HasKey("InvoiceNumber")
                        .HasName("PK_InvoiceNumberGenerator");

                    b.ToTable("InvoiceNumberGenerator");
                });

            modelBuilder.Entity("Isas.Models.LoadFormat", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Delimiter")
                        .HasMaxLength(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ProductID");

                    b.Property<int>("UploadFileType");

                    b.HasKey("ID");

                    b.ToTable("LoadFormat");
                });

            modelBuilder.Entity("Isas.Models.Loan", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BulkHandle");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ComponentID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LoanDate");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SettlementDate");

                    b.Property<decimal>("Term")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("PolicyID");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("Isas.Models.LoanHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BulkHandle");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ComponentID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LoanDate");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SettlementDate")
                        .IsRequired();

                    b.Property<decimal>("Term")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("LoanHistory");
                });

            modelBuilder.Entity("Isas.Models.LoanTemp", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber");

                    b.Property<Guid>("ComponentID");

                    b.Property<string>("IDNumber");

                    b.Property<DateTime?>("LoanDate");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductID");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SettlementDate");

                    b.Property<decimal>("Term")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserID");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ComponentID");

                    b.ToTable("LoanTemp");
                });

            modelBuilder.Entity("Isas.Models.LossAdjuster", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Payable");

                    b.Property<int>("PayeeClassID");

                    b.HasKey("ID");

                    b.ToTable("LossAdjuster");
                });

            modelBuilder.Entity("Isas.Models.Motor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Alarm");

                    b.Property<bool>("BusinessUse");

                    b.Property<int>("CFG");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CoverageID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("DriverTypeID");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("GreyImport");

                    b.Property<bool>("Immobiliser");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ManufacturerYear");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<Guid>("MotorMakeID");

                    b.Property<Guid>("MotorModelID");

                    b.Property<Guid>("MotorTypeID");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PrivateUse");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TerritorialLimit")
                        .HasMaxLength(250);

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ChassisNumber")
                        .IsUnique()
                        .HasName("IX_ChassisNumber");

                    b.HasIndex("CoverageID");

                    b.HasIndex("DriverTypeID");

                    b.HasIndex("EngineNumber")
                        .IsUnique()
                        .HasName("IX_EngineNumber");

                    b.HasIndex("MotorMakeID");

                    b.HasIndex("MotorTypeID");

                    b.HasIndex("PolicyID");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique()
                        .HasName("IX_RegistrationNumber");

                    b.ToTable("Motor");
                });

            modelBuilder.Entity("Isas.Models.MotorDriver", b =>
                {
                    b.Property<Guid>("MotorID");

                    b.Property<Guid>("DriverID");

                    b.Property<bool>("IsPrimaryDriver");

                    b.HasKey("MotorID", "DriverID")
                        .HasName("PK_MotorDriver");

                    b.HasIndex("DriverID");

                    b.ToTable("MotorDriver");
                });

            modelBuilder.Entity("Isas.Models.MotorHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Alarm");

                    b.Property<bool>("BusinessUse");

                    b.Property<int>("CFG");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CoverageID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("DriverTypeID");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("GreyImport");

                    b.Property<bool>("Immobiliser");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ManufacturerYear");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<Guid>("MotorMakeID");

                    b.Property<Guid>("MotorModelID");

                    b.Property<Guid>("MotorTypeID");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PrivateUse");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TerritorialLimit")
                        .HasMaxLength(250);

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("MotorHistory");
                });

            modelBuilder.Entity("Isas.Models.MotorMake", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("MotorMake");
                });

            modelBuilder.Entity("Isas.Models.MotorModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MotorMakeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("MotorMakeID");

                    b.ToTable("MotorModel");
                });

            modelBuilder.Entity("Isas.Models.MotorSection", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndDate");

                    b.Property<Guid>("MotorID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("MotorID");

                    b.ToTable("MotorSection");
                });

            modelBuilder.Entity("Isas.Models.MotorThirdParty", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ClaimNumber");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ManufacturerYear");

                    b.Property<Guid>("MotorMakeID");

                    b.Property<Guid>("MotorModelID");

                    b.Property<Guid>("MotorTypeID");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("ClaimNumber");

                    b.ToTable("MotorThirdParty");
                });

            modelBuilder.Entity("Isas.Models.MotorType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("MotorType");
                });

            modelBuilder.Entity("Isas.Models.Occupation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Occupation");
                });

            modelBuilder.Entity("Isas.Models.Payable", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<DateTime>("PayableDate");

                    b.Property<Guid?>("PayableExportID");

                    b.Property<int>("PaymentTypeID");

                    b.Property<Guid>("ProductID");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasMaxLength(50);

                    b.Property<bool>("Void");

                    b.Property<string>("VoidReason")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("PaymentTypeID");

                    b.HasIndex("Reference")
                        .IsUnique()
                        .HasName("IX_PayableReference");

                    b.ToTable("Payable");
                });

            modelBuilder.Entity("Isas.Models.PayableExport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExportDate");

                    b.Property<string>("ExternalReference");

                    b.Property<string>("FileObject");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PayableExport");
                });

            modelBuilder.Entity("Isas.Models.Payee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("PayeeClassID");

                    b.Property<Guid>("PayeeItemID");

                    b.HasKey("ID");

                    b.HasIndex("PayeeClassID", "PayeeItemID")
                        .IsUnique()
                        .HasName("IX_PayeeClassItem");

                    b.ToTable("Payee");
                });

            modelBuilder.Entity("Isas.Models.PayeeBankAccount", b =>
                {
                    b.Property<Guid>("PayeeID");

                    b.Property<Guid>("BankAccountID");

                    b.HasKey("PayeeID", "BankAccountID")
                        .HasName("PK_PayeeBankAccount");

                    b.HasIndex("BankAccountID");

                    b.ToTable("PayeeBankAccount");
                });

            modelBuilder.Entity("Isas.Models.PayeeClass", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PayeeClass");
                });

            modelBuilder.Entity("Isas.Models.PaymentType", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("Isas.Models.Policy", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<int>("BulkHandle");

                    b.Property<Guid>("ClientID");

                    b.Property<string>("Comment")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime>("EffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<DateTime>("InceptionDate");

                    b.Property<Guid>("IncomeClassID");

                    b.Property<Guid>("InsurerID");

                    b.Property<string>("InsurerNumber")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<Guid>("PolicyFrequencyID");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("PolicyStatusID");

                    b.Property<int>("PolicyVersion");

                    b.Property<DateTime>("PremiumDueDate");

                    b.Property<Guid>("ProductID");

                    b.Property<bool>("Renewable");

                    b.Property<DateTime>("StatusDate");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("IncomeClassID");

                    b.HasIndex("InsurerID");

                    b.HasIndex("PolicyFrequencyID");

                    b.HasIndex("PolicyNumber")
                        .IsUnique()
                        .HasName("IX_PolicyNumber");

                    b.HasIndex("PolicyStatusID");

                    b.HasIndex("ProductID");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("Isas.Models.PolicyBankAccount", b =>
                {
                    b.Property<Guid>("PolicyID");

                    b.Property<Guid>("BankAccountID");

                    b.HasKey("PolicyID", "BankAccountID")
                        .HasName("PK_PolicyBankAccount");

                    b.HasIndex("BankAccountID");

                    b.ToTable("PolicyBankAccount");
                });

            modelBuilder.Entity("Isas.Models.PolicyFrequency", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Divisor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PolicyFrequency");
                });

            modelBuilder.Entity("Isas.Models.PolicyHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<int>("BulkHandle");

                    b.Property<Guid>("ClientID");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CoverEndDate");

                    b.Property<DateTime>("CoverStartDate");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("HistoryID");

                    b.Property<DateTime?>("InceptionDate");

                    b.Property<Guid>("IncomeClassID");

                    b.Property<Guid>("InsurerID");

                    b.Property<string>("InsurerNumber");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<Guid>("PolicyFrequencyID");

                    b.Property<string>("PolicyNumber");

                    b.Property<Guid>("PolicyStatusID");

                    b.Property<int>("PolicyVersion");

                    b.Property<DateTime?>("PremiumDueDate");

                    b.Property<Guid>("ProductID");

                    b.Property<bool>("Renewable");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("ID");

                    b.ToTable("PolicyHistory");
                });

            modelBuilder.Entity("Isas.Models.PolicyNumberGenerator", b =>
                {
                    b.Property<int>("PolicyNumber");

                    b.HasKey("PolicyNumber")
                        .HasName("PK_PolicyNumberGenerator");

                    b.ToTable("PolicyNumberGenerator");
                });

            modelBuilder.Entity("Isas.Models.PolicyStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Updatable");

                    b.HasKey("ID");

                    b.ToTable("PolicyStatus");
                });

            modelBuilder.Entity("Isas.Models.PolicyTemp", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientID");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<string>("IDNumber");

                    b.Property<DateTime?>("InceptionDate");

                    b.Property<Guid>("InsurerID");

                    b.Property<string>("InsurerNumber");

                    b.Property<Guid>("PolicyFrequencyID");

                    b.Property<string>("PolicyNumber");

                    b.Property<Guid>("PolicyStatusID");

                    b.Property<int>("PolicyVersion");

                    b.Property<DateTime?>("PremiumDueDate");

                    b.Property<Guid>("ProductID");

                    b.Property<bool>("Renewable");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("InsurerID");

                    b.HasIndex("PolicyFrequencyID");

                    b.HasIndex("PolicyStatusID");

                    b.ToTable("PolicyTemp");
                });

            modelBuilder.Entity("Isas.Models.Premium", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BulkHandle");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<DateTime>("PremiumDate");

                    b.Property<Guid>("PremiumTypeID");

                    b.Property<Guid>("ReceivableID");

                    b.Property<int>("RiskID");

                    b.Property<Guid>("RiskItemID");

                    b.HasKey("ID");

                    b.HasIndex("PolicyID");

                    b.HasIndex("PremiumTypeID");

                    b.HasIndex("ReceivableID");

                    b.HasIndex("RiskID");

                    b.ToTable("Premium");
                });

            modelBuilder.Entity("Isas.Models.PremiumRefund", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("AuthoriserID");

                    b.Property<string>("BatchNumber");

                    b.Property<bool>("IsAuthorised");

                    b.Property<Guid>("PaymentMadeID");

                    b.Property<Guid>("PremiumID");

                    b.Property<string>("Reference")
                        .HasMaxLength(50);

                    b.Property<DateTime>("RefundDate");

                    b.Property<DateTime>("RequsitionDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("PremiumID");

                    b.ToTable("PremiumRefund");
                });

            modelBuilder.Entity("Isas.Models.PremiumTemp", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IDNumber")
                        .HasMaxLength(50);

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PaymentTypeID");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PremiumDate");

                    b.Property<Guid>("PremiumTypeID");

                    b.Property<Guid>("ProductID");

                    b.Property<DateTime>("ReceivableDate");

                    b.Property<string>("Reference")
                        .HasMaxLength(50);

                    b.Property<int>("RiskID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("PremiumTypeID");

                    b.ToTable("PremiumTemp");
                });

            modelBuilder.Entity("Isas.Models.PremiumType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PremiumType");
                });

            modelBuilder.Entity("Isas.Models.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContainerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RenewalPeriod");

                    b.HasKey("ID");

                    b.HasIndex("ContainerID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Isas.Models.ProductClient", b =>
                {
                    b.Property<Guid>("ProductID");

                    b.Property<Guid>("ClientID");

                    b.HasKey("ProductID", "ClientID")
                        .HasName("PK_ProductClient");

                    b.HasIndex("ClientID");

                    b.ToTable("ProductClient");
                });

            modelBuilder.Entity("Isas.Models.ProductRisk", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ClaimLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClaimPrefix");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductID");

                    b.Property<int>("RiskID");

                    b.Property<bool>("UseCFG");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("RiskID");

                    b.ToTable("ProductRisk");
                });

            modelBuilder.Entity("Isas.Models.ProductRiskBenefit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Benefit")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ProductRiskID");

                    b.HasKey("ID");

                    b.HasIndex("ProductRiskID");

                    b.ToTable("ProductRiskBenefit");
                });

            modelBuilder.Entity("Isas.Models.Property", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BondHolder")
                        .HasMaxLength(50);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CoverageID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ResidenceTypeID");

                    b.Property<Guid>("RoofTypeID");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WallTypeID");

                    b.HasKey("ID");

                    b.HasIndex("CoverageID");

                    b.HasIndex("PolicyID");

                    b.HasIndex("ResidenceTypeID");

                    b.HasIndex("RoofTypeID");

                    b.HasIndex("WallTypeID");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Isas.Models.PropertyHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("AdminFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BondHolder")
                        .HasMaxLength(50);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CoverageID");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InsurerFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<decimal>("PolicyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyID");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ResidenceTypeID");

                    b.Property<Guid>("RoofTypeID");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WallTypeID");

                    b.HasKey("ID");

                    b.ToTable("PropertyHistory");
                });

            modelBuilder.Entity("Isas.Models.Province", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CountryID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Isas.Models.Receivable", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddedBy");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BatchNumber");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<int>("PaymentTypeID");

                    b.Property<Guid>("ProductID");

                    b.Property<DateTime>("ReceivableDate");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("PaymentTypeID");

                    b.HasIndex("Reference")
                        .IsUnique()
                        .HasName("IX_ReceivableReference");

                    b.ToTable("Receivable");
                });

            modelBuilder.Entity("Isas.Models.Region", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Isas.Models.Repairer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Payable");

                    b.Property<int>("PayeeClassID");

                    b.HasKey("ID");

                    b.ToTable("Repairer");
                });

            modelBuilder.Entity("Isas.Models.ResidenceType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("ResidenceType");
                });

            modelBuilder.Entity("Isas.Models.Risk", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Risk");
                });

            modelBuilder.Entity("Isas.Models.RiskClaimClass", b =>
                {
                    b.Property<int>("RiskID");

                    b.Property<Guid>("ClaimClassID");

                    b.HasKey("RiskID", "ClaimClassID")
                        .HasName("PK_RiskClaimClass");

                    b.HasIndex("ClaimClassID");

                    b.ToTable("RiskClaimClass");
                });

            modelBuilder.Entity("Isas.Models.RiskClaimDocument", b =>
                {
                    b.Property<int>("RiskID");

                    b.Property<Guid>("ClaimDocumentID");

                    b.HasKey("RiskID", "ClaimDocumentID")
                        .HasName("PK_RiskClaimDocument");

                    b.HasIndex("ClaimDocumentID");

                    b.ToTable("RiskClaimDocument");
                });

            modelBuilder.Entity("Isas.Models.RiskIncident", b =>
                {
                    b.Property<int>("RiskID");

                    b.Property<Guid>("IncidentID");

                    b.HasKey("RiskID", "IncidentID")
                        .HasName("PK_RiskIncident");

                    b.HasIndex("IncidentID");

                    b.ToTable("RiskIncident");
                });

            modelBuilder.Entity("Isas.Models.RoofType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("RoofType");
                });

            modelBuilder.Entity("Isas.Models.ThirdParty", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Payable");

                    b.Property<int>("PayeeClassID");

                    b.HasKey("ID");

                    b.ToTable("ThirdParty");
                });

            modelBuilder.Entity("Isas.Models.Title", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("Isas.Models.TracingAgent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Payable");

                    b.Property<int>("PayeeClassID");

                    b.HasKey("ID");

                    b.ToTable("TracingAgent");
                });

            modelBuilder.Entity("Isas.Models.TransactionType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("Isas.Models.WallType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("WallType");
                });

            modelBuilder.Entity("Isas.Models.Address", b =>
                {
                    b.HasOne("Isas.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.AddressAssignment", b =>
                {
                    b.HasOne("Isas.Models.Address", "Address")
                        .WithMany("AddressAssignments")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.AllRisk", b =>
                {
                    b.HasOne("Isas.Models.Component", "Component")
                        .WithMany("AllRisks")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Policy", "Policy")
                        .WithMany("AllRisk")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.AllRiskHistory", b =>
                {
                    b.HasOne("Isas.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.BankAccount", b =>
                {
                    b.HasOne("Isas.Models.BankBranch", "BankBranch")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankBranchID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.BankBranch", b =>
                {
                    b.HasOne("Isas.Models.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Claim", b =>
                {
                    b.HasOne("Isas.Models.Affected")
                        .WithMany("Claims")
                        .HasForeignKey("AffectedID");

                    b.HasOne("Isas.Models.ClaimClass", "ClaimClass")
                        .WithMany("Claims")
                        .HasForeignKey("ClaimClassID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.ClaimStatus", "ClaimStatus")
                        .WithMany("Claims")
                        .HasForeignKey("ClaimStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Incident", "Incident")
                        .WithMany("Claims")
                        .HasForeignKey("IncidentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Policy", "Policy")
                        .WithMany("Claims")
                        .HasForeignKey("PolicyID")
                        .HasConstraintName("FK_Claim_Policy_PolicyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Region", "Region")
                        .WithMany("Claims")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Risk", "Risk")
                        .WithMany("Claims")
                        .HasForeignKey("RiskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClaimAttorney", b =>
                {
                    b.HasOne("Isas.Models.Attorney", "Attorney")
                        .WithMany("ClaimAttorneys")
                        .HasForeignKey("AttorneyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimNumber1");
                });

            modelBuilder.Entity("Isas.Models.ClaimDiary", b =>
                {
                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany("ClaimDiaries")
                        .HasForeignKey("ClaimNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClaimDocumentSubmit", b =>
                {
                    b.HasOne("Isas.Models.ClaimDocument", "ClaimDocument")
                        .WithMany("ClaimDocumentSubmits")
                        .HasForeignKey("ClaimDocumentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany("ClaimDocumentSubmits")
                        .HasForeignKey("ClaimNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClaimDriver", b =>
                {
                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany("ClaimDrivers")
                        .HasForeignKey("ClaimNumber1");

                    b.HasOne("Isas.Models.Driver", "Driver")
                        .WithMany("ClaimDrivers")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClaimLossAdjuster", b =>
                {
                    b.HasOne("Isas.Models.LossAdjuster", "LossAdjuster")
                        .WithMany("ClaimLossAdjusters")
                        .HasForeignKey("LossAdjusterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClaimRecovery", b =>
                {
                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany("ClaimRecoveries")
                        .HasForeignKey("ClaimNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.ThirdParty", "ThirdParty")
                        .WithMany("ClaimRecoveries")
                        .HasForeignKey("ThirdPartyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClaimRepairer", b =>
                {
                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimNumber1");

                    b.HasOne("Isas.Models.Repairer", "Repairer")
                        .WithMany("ClaimRepairers")
                        .HasForeignKey("RepairerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClaimThirdParty", b =>
                {
                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany("ClaimThirdParties")
                        .HasForeignKey("ClaimNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.ThirdParty", "ThirdParty")
                        .WithMany("ClaimThirdParties")
                        .HasForeignKey("ThirdPartyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClaimTracingAgent", b =>
                {
                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimNumber1");

                    b.HasOne("Isas.Models.TracingAgent", "TracingAgent")
                        .WithMany("ClaimTracingAgents")
                        .HasForeignKey("TracingAgentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClaimTransaction", b =>
                {
                    b.HasOne("Isas.Models.AccountChart", "Account")
                        .WithMany("ClaimTransactions")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Affected", "Affected")
                        .WithMany()
                        .HasForeignKey("AffectedID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany("ClaimTransactions")
                        .HasForeignKey("ClaimNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Payable", "Payable")
                        .WithMany("ClaimTransaction")
                        .HasForeignKey("PayableID");

                    b.HasOne("Isas.Models.Payee", "Payee")
                        .WithMany("ClaimTransactions")
                        .HasForeignKey("PayeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.TransactionType", "TransactionType")
                        .WithMany("ClaimTransactions")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Client", b =>
                {
                    b.HasOne("Isas.Models.ClientType", "ClientType")
                        .WithMany("Clients")
                        .HasForeignKey("ClientTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Country", "Country")
                        .WithMany("Clients")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Occupation", "Occupation")
                        .WithMany("Clients")
                        .HasForeignKey("OccupationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Title", "Title")
                        .WithMany("Clients")
                        .HasForeignKey("TitleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ClientTemp", b =>
                {
                    b.HasOne("Isas.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Commercial", b =>
                {
                    b.HasOne("Isas.Models.Component", "Component")
                        .WithMany("Commercials")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Policy", "Policy")
                        .WithMany("Commercial")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ComplaintDetail", b =>
                {
                    b.HasOne("Isas.Models.Complaint", "Complaint")
                        .WithMany("ComplaintDetails")
                        .HasForeignKey("ComplaintID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Container", b =>
                {
                    b.HasOne("Isas.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");
                });

            modelBuilder.Entity("Isas.Models.Content", b =>
                {
                    b.HasOne("Isas.Models.Policy", "Policy")
                        .WithMany("Content")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.ResidenceType", "ResidenceType")
                        .WithMany("Contents")
                        .HasForeignKey("ResidenceTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.RoofType", "RoofType")
                        .WithMany("Contents")
                        .HasForeignKey("RoofTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.WallType", "WallType")
                        .WithMany("Contents")
                        .HasForeignKey("WallTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Driver", b =>
                {
                    b.HasOne("Isas.Models.Title", "Title")
                        .WithMany("Drivers")
                        .HasForeignKey("TitleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.FormatType", b =>
                {
                    b.HasOne("Isas.Models.LoadFormat", "LoadFormat")
                        .WithMany("FormatTypes")
                        .HasForeignKey("LoadFormatID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.IncidentContact", b =>
                {
                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany("IncidentContacts")
                        .HasForeignKey("ClaimNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.InvoiceItem", b =>
                {
                    b.HasOne("Isas.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Loan", b =>
                {
                    b.HasOne("Isas.Models.Component", "Component")
                        .WithMany("Loans")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Policy", "Policy")
                        .WithMany("Loan")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.LoanTemp", b =>
                {
                    b.HasOne("Isas.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Motor", b =>
                {
                    b.HasOne("Isas.Models.Coverage", "Coverage")
                        .WithMany("Motors")
                        .HasForeignKey("CoverageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.DriverType", "DriverType")
                        .WithMany("Motors")
                        .HasForeignKey("DriverTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.MotorMake", "MotorMake")
                        .WithMany("Motors")
                        .HasForeignKey("MotorMakeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.MotorType", "MotorType")
                        .WithMany("Motors")
                        .HasForeignKey("MotorTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Policy", "Policy")
                        .WithMany("Motor")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.MotorDriver", b =>
                {
                    b.HasOne("Isas.Models.Driver", "Driver")
                        .WithMany("MotorDrivers")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Motor", "Motor")
                        .WithMany("MotorDrivers")
                        .HasForeignKey("MotorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.MotorModel", b =>
                {
                    b.HasOne("Isas.Models.MotorMake", "MotorMake")
                        .WithMany("MotorModels")
                        .HasForeignKey("MotorMakeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.MotorSection", b =>
                {
                    b.HasOne("Isas.Models.Motor", "Motor")
                        .WithMany("MotorSections")
                        .HasForeignKey("MotorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.MotorThirdParty", b =>
                {
                    b.HasOne("Isas.Models.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Payable", b =>
                {
                    b.HasOne("Isas.Models.PaymentType", "PaymentType")
                        .WithMany("Payables")
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Payee", b =>
                {
                    b.HasOne("Isas.Models.PayeeClass", "PayeeClass")
                        .WithMany("Payees")
                        .HasForeignKey("PayeeClassID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.PayeeBankAccount", b =>
                {
                    b.HasOne("Isas.Models.BankAccount", "BankAccount")
                        .WithMany("PayeeBankAccount")
                        .HasForeignKey("BankAccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Payee", "Payee")
                        .WithMany("PayeeBankAccounts")
                        .HasForeignKey("PayeeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Policy", b =>
                {
                    b.HasOne("Isas.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.IncomeClass", "IncomeClass")
                        .WithMany("Policies")
                        .HasForeignKey("IncomeClassID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Insurer", "Insurer")
                        .WithMany("Policies")
                        .HasForeignKey("InsurerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.PolicyFrequency", "PolicyFrequency")
                        .WithMany("Policies")
                        .HasForeignKey("PolicyFrequencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.PolicyStatus", "PolicyStatus")
                        .WithMany("Policies")
                        .HasForeignKey("PolicyStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.PolicyBankAccount", b =>
                {
                    b.HasOne("Isas.Models.BankAccount", "BankAccount")
                        .WithMany("PolicyBankAccounts")
                        .HasForeignKey("BankAccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Policy", "Policy")
                        .WithMany("PolicyBankAccount")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.PolicyTemp", b =>
                {
                    b.HasOne("Isas.Models.Insurer", "Insurer")
                        .WithMany()
                        .HasForeignKey("InsurerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.PolicyFrequency", "PolicyFrequency")
                        .WithMany()
                        .HasForeignKey("PolicyFrequencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.PolicyStatus", "PolicyStatus")
                        .WithMany()
                        .HasForeignKey("PolicyStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Premium", b =>
                {
                    b.HasOne("Isas.Models.Policy", "Policy")
                        .WithMany("Premiums")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.PremiumType", "PremiumType")
                        .WithMany("Premiums")
                        .HasForeignKey("PremiumTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Receivable", "Receivable")
                        .WithMany("Premiums")
                        .HasForeignKey("ReceivableID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Risk", "Risk")
                        .WithMany()
                        .HasForeignKey("RiskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.PremiumRefund", b =>
                {
                    b.HasOne("Isas.Models.AccountChart", "Account")
                        .WithMany("PremiumRefunds")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Premium", "Premium")
                        .WithMany()
                        .HasForeignKey("PremiumID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.PremiumTemp", b =>
                {
                    b.HasOne("Isas.Models.PremiumType", "PremiumType")
                        .WithMany()
                        .HasForeignKey("PremiumTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Product", b =>
                {
                    b.HasOne("Isas.Models.Container", "Container")
                        .WithMany("Products")
                        .HasForeignKey("ContainerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ProductClient", b =>
                {
                    b.HasOne("Isas.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ProductRisk", b =>
                {
                    b.HasOne("Isas.Models.Product", "Product")
                        .WithMany("ProductRisks")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Risk", "Risk")
                        .WithMany("ProductRisks")
                        .HasForeignKey("RiskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.ProductRiskBenefit", b =>
                {
                    b.HasOne("Isas.Models.ProductRisk", "ProductRisk")
                        .WithMany("ProductRiskBenefits")
                        .HasForeignKey("ProductRiskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Property", b =>
                {
                    b.HasOne("Isas.Models.Coverage", "Coverage")
                        .WithMany("Properties")
                        .HasForeignKey("CoverageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Policy", "Policy")
                        .WithMany("Property")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.ResidenceType", "ResidenceType")
                        .WithMany("Properties")
                        .HasForeignKey("ResidenceTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.RoofType", "RoofType")
                        .WithMany("Properties")
                        .HasForeignKey("RoofTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.WallType", "WallType")
                        .WithMany("Properties")
                        .HasForeignKey("WallTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Province", b =>
                {
                    b.HasOne("Isas.Models.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.Receivable", b =>
                {
                    b.HasOne("Isas.Models.PaymentType", "PaymentType")
                        .WithMany("Receivables")
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.RiskClaimClass", b =>
                {
                    b.HasOne("Isas.Models.ClaimClass", "ClaimClass")
                        .WithMany()
                        .HasForeignKey("ClaimClassID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Risk", "Risk")
                        .WithMany("RiskClaimClasses")
                        .HasForeignKey("RiskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.RiskClaimDocument", b =>
                {
                    b.HasOne("Isas.Models.ClaimDocument", "ClaimDocument")
                        .WithMany("RiskClaimDocuments")
                        .HasForeignKey("ClaimDocumentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Risk", "Risk")
                        .WithMany("RiskClaimDocuments")
                        .HasForeignKey("RiskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Isas.Models.RiskIncident", b =>
                {
                    b.HasOne("Isas.Models.Incident", "Incident")
                        .WithMany("RiskIncidents")
                        .HasForeignKey("IncidentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Isas.Models.Risk", "Risk")
                        .WithMany("RiskIncidents")
                        .HasForeignKey("RiskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
